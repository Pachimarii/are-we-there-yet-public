{"version":3,"sources":["Theme.js","resources/imgs/favicon.ico","components/Header.js","components/Footer.js","components/CoverageScreen/SearchBar.js","components/CoverageScreen/CoverageCell.js","components/CoverageScreen/CoverageSelection.js","components/CoverageScreen/CoverageFilter.js","components/CoverageScreen/PaperDetails.js","components/CoverageScreen/CoverageMatrix.js","components/CoverageScreen/CoverageTab.js","components/CoverageScreen/CoverageContainer.js","components/CoverageScreen/PapersSection.js","components/CoverageScreen/WaffleChartCell.js","components/CoverageScreen/WaffleChart.js","screens/CoverageScreen.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalStyle","createGlobalStyle","StyledNav","styled","div","Header","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","src","logo","alt","width","Toggle","aria-controls","Collapse","id","Nav","className","Link","StyledFooter","Footer","StyledSearchBar","SearchBar","searchByTitle","Form","onSubmit","e","preventDefault","target","elements","value","Label","Control","type","placeholder","Button","StyledCellContainer","CoverageCell","category","name","handleClick","status","isActive","React","useState","active","setActive","clickEvent","useEffect","localeCompare","onClick","StyledCoverageSelection","StyledCoverageContainer","CoverageSelection","types","coverage_data","modPapers","gridStatus","selectedFirstEncoding","setSelectedFirstEncoding","selectedSecondEncoding","setSelectedSecondEncoding","selectedThirdEncoding","setSelectedThirdEncoding","encodingList","setEncodingList","num","getData","key","coverage","undefined","Object","keys","includes","data","length","values","map","item","combination","arr","filter","sort","k","join","newList","JSON","parse","stringify","lst","replace","console","log","removeFromEncodingList","t","block","addToEncodingList","StyledCoverageFilter","CoverageFilter","tasks","searchByPaperType","deleteSelectedTasks","selectedTasks","addSelectedTasks","encodingTypes","paperCheckbox","setPaperCheckbox","taskSuggestions","push","label","handlePaperCheckbox","idx","temp","Card","Body","Tabs","defaultActiveKey","Tab","eventKey","title","allowCreateTag","suggestions","onAdd","onDelete","Check","inline","onChange","StyledPaperDetails","PaperDetails","toLowerCase","ranked","StyledPapersSection","PapersSection","selected_paper","papers","render","StyledChartCellContainer","WaffleChartCell","class","StyledWaffleChart","WaffleChart","count","setCount","len","total","Math","pow","i","entries","coverages","encoding","ProgressBar","now","design","StyledCoverageScreen","CoverageScreen","setSelectedTasks","paperType","setPaperType","selectedPapers","setSelectedPapers","filteredSelectedPapers","setFilteredSelectedPapers","filterData","setFilterData","searchQuery","setSearchQuery","authors","setData","abstractedPaperData","setAbstracatedPaperData","parsed_coverages","updateFilteredSelectedPaper","new_filtered_data","paper","channel_map","positionX","positionY","angle","area","texture","volume","density","shape","orentation","encoding_counts","getCoverages","source","times","new_data","c","Tasks","processed_task","designs","layers","layer","count_encodings","encoding_formats","Array","fill","reduce","a","b","concat","channel","c2","new_format","encoding_strs","f","indexOf","str","e_s","Category","filterHelper","Title","new_abstracted_data","Results","Experimental","Theoretical","res","trimmed","trim","setTasks","paperidx","curPaperType","index","splice","tag","mode","updated_papers","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"+4LAuDeA,EArDKC,YAAH,20C,gDCFF,MAA0B,oC,OCQnCC,EAAYC,IAAOC,IAAV,sKAoCAC,EAzBF,WACT,OACI,cAACH,EAAD,UACI,eAACI,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,OAAvD,UACI,eAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,QAAnB,UACI,qBAAKC,IAAKC,EAAMC,IAAI,OAAOC,MAAM,SADrC,4BAIA,cAACV,EAAA,EAAOW,OAAR,CAAeC,gBAAc,0BAC7B,eAACZ,EAAA,EAAOa,SAAR,CAAiBC,GAAG,wBAApB,UACI,cAACC,EAAA,EAAD,CAAKC,UAAU,YAEf,eAACD,EAAA,EAAD,WACI,cAACA,EAAA,EAAIE,KAAL,CAAUX,KAAK,kBAAf,6BACA,cAACS,EAAA,EAAIE,KAAL,CAAUX,KAAK,YAAf,mCACA,cAACS,EAAA,EAAIE,KAAL,CAAUX,KAAK,aAAf,oCACA,cAACS,EAAA,EAAIE,KAAL,CAAUX,KAAK,aAAf,oCACA,cAACS,EAAA,EAAIE,KAAL,CAAUX,KAAK,YAAf,oCCjClBY,EAAerB,IAAOC,IAAV,kHAeHqB,EARF,WACT,OACI,cAACD,EAAD,kC,gBCJFE,EAAkBvB,IAAOC,IAAV,4oBA2DNuB,EA3BC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAKf,OACI,cAACF,EAAD,UACI,eAACG,EAAA,EAAD,CAAMP,UAAU,cAAcQ,SANjB,SAACC,GAClBA,EAAEC,iBACFJ,EAAcG,EAAEE,OAAOC,SAAS,GAAGC,QAI/B,UACI,cAACN,EAAA,EAAKO,MAAN,6CACA,mBAAGd,UAAU,mCACb,cAACO,EAAA,EAAKQ,QAAN,CACIf,UAAU,oBACVgB,KAAK,OACLC,YAAY,KAEhB,eAACC,EAAA,EAAD,CACIlB,UAAU,kBACVZ,QAAQ,UACR4B,KAAK,SAHT,UAIK,IAJL,SAKW,a,QCxDrBG,EAAsBtC,IAAOC,IAAV,+vDAiIVsC,EA9CI,SAAC,GAA2D,IAA1DC,EAAyD,EAAzDA,SAAUC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,SAAUT,EAAU,EAAVA,KAChE,EAA4BU,IAAMC,SAASH,GAA3C,mBAAOI,EAAP,KAAeC,EAAf,KAEIC,EAAa,WACbD,GAAWD,GACXL,GAAaK,EAAQN,IAOzB,OAJAS,qBAAU,WACNF,EAAUL,KACX,CAACA,IAE4C,IAA5CH,EAASW,cAAc,iBAEV,WAAThB,EAEI,cAACG,EAAD,UACI,qBAAKnB,UAAS,sBAAiByB,EAAW,oCAAsC,0BAA4BQ,QAAS,kBAAMV,KAA3H,SACKE,EAAW,mBAAGzB,UAAU,iBAAsB,sCAOvD,cAACmB,EAAD,UAIR,qBAAKnB,UAAS,sBAAiB4B,EAAS,oCAAsC,0BAA4BK,QAAS,kBAAMH,KAAzH,SACKF,EAAS,mBAAG5B,UAAU,iBAAsB,sCAMjD,cAACmB,EAAD,UACI,qBAAKnB,UAAS,sBAAiB4B,EAASP,EAAS,uBAAyBA,EAAS,aAAeY,QAAS,kBAAMH,KAAjH,SACIF,EAAU,mBAAG5B,UAAU,iBAAsB,qCAF3BsB,IC9G5BY,EAA0BrD,IAAOC,IAAV,84CA8DvBqD,EAA0BtD,IAAOC,IAAV,8YA8KdsD,EAxJW,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,UAC1CC,EAAa,GAEjB,EAA0Db,mBAAS,IAAnE,mBAAOc,EAAP,KAA8BC,EAA9B,KACA,EAA4Df,mBAAS,IAArE,mBAAOgB,EAAP,KAA+BC,EAA/B,KACA,EAA0DjB,mBAAS,IAAnE,mBAAOkB,EAAP,KAA8BC,EAA9B,KAKA,EAAwCnB,mBAAS,IAAjD,mBAAOoB,EAAP,KAAqBC,EAArB,KAGMzB,EAAc,SAAC0B,EAAK3B,GACV,IAAR2B,EACoCP,EAAhCD,IAA0BnB,EAA+B,GAC/BA,GACf,IAAR2B,EAC8BL,EAAjCD,IAA2BrB,EAAgC,GAChCA,GAChB,IAAR2B,GAC6BH,EAAhCD,IAA0BvB,EAA+B,GAC/BA,IAiDlC4B,EAAU,SAACD,EAAKE,GAChB,IAAIC,EAAWd,EAAc,GAAD,OAAIW,EAAJ,cAC5B,YAAiBI,IAAbD,GAA0BE,OAAOC,KAAKH,GAAUI,SAASL,IAAQC,EAASD,GAAKM,KAAKC,OAAS,EACtFN,EAASD,GAAKM,KAEd,IAKf,OACI,eAACvB,EAAD,WAC4C,IAAvCoB,OAAOK,OAAOZ,GAAcW,OACzB,GAEA,sBAAK1D,UAAU,kCAAf,UACI,mBAAGA,UAAU,2BAAb,yCACA,qBAAKA,UAAU,0BAAf,SAEQsD,OAAOK,OAAOZ,GAAca,KAAK,SAAAC,GAC7B,OACI,sBAAK7D,UAAU,0BAAf,UACK6D,EAAKD,KAAK,SAAAnD,GAAC,OAAK,mBAAkBT,UAAU,kBAA5B,SAA+CS,GAA/C,UAAWA,EAAX,UACjB,mBAAGT,UAAU,sBAAsBiC,QAAS,kBA7CjD,SAAC6B,GAE5B,IAAIC,EAAMD,EAAYE,QAAQ,SAAAvD,GAAC,MAAU,KAANA,KAEnCsD,EAAIE,OAGJ,IAAIC,EAAKH,EAAII,OAGb,QAAwBd,IAApBN,EAAamB,GAAkB,CAC/B,IAAIE,EAAUC,KAAKC,MAAMD,KAAKE,UAAUxB,WACjCqB,EAAQF,GACflB,EAAgBoB,GAChB,IAAII,EAAMtB,EAAQa,EAAIL,OAAQQ,EAAEO,QAAQ,IAAI,KAE5ClC,GAAU,EAAOiC,QAEjBE,QAAQC,IAAR,kCAAuCT,EAAvC,6CA2B8EU,CAAuBf,iBASrG,sBAAK7D,UAAU,mCAAf,UACA,mBAAGA,UAAU,2BAAb,sCACI,sBAAKA,UAAU,gCAAf,UACI,mBAAGA,UAAU,+BAAb,0BACA,cAACmC,EAAD,UACI,sBAAKnC,UAAU,YAAf,UACKqC,EAAMuB,KAAI,SAACiB,GAAD,OACN,qBAAK7E,UAAU,cAAf,SAAiD6E,GAAjD,gBAA2CA,OAC/CxC,EAAMuB,KAAI,SAACiB,GAER,OADArC,EAAWqC,IAAK,EAEhB,cAAC,EAAD,CAA6BxD,SAAS,gBAAgBC,KAAMuD,EAC5DtD,YAAa,kBAAMA,EAAY,EAAEsD,IAAIpD,SAAUgB,IAA0BoC,EAAG7D,KAAK,UADjF,UAAsB6D,EAAtB,kBAMhB,sBAAK7E,UAAU,gCAAf,UACI,mBAAGA,UAAU,2BAAb,0BACA,cAACmC,EAAD,UACI,qBAAKnC,UAAU,YAAf,SACKqC,EAAMuB,KAAI,SAACiB,GAER,OADArC,EAAWqC,IAAK,EAEhB,cAAC,EAAD,CAA6BxD,SAAS,gBAAgBC,KAAMuD,EAC5DtD,YAAa,kBAAMA,EAAY,EAAEsD,IAAIpD,SAAUkB,IAA2BkC,EAAG7D,KAAK,UADlF,UAAsB6D,EAAtB,iBAMhB,sBAAK7E,UAAU,gCAAf,UACI,mBAAGA,UAAU,2BAAb,0BACA,cAACmC,EAAD,UACI,qBAAKnC,UAAU,YAAf,SACKqC,EAAMuB,KAAI,SAACiB,GAER,OADArC,EAAWqC,IAAK,EAEhB,cAAC,EAAD,CAA6BxD,SAAS,gBAAgBC,KAAMuD,EAC5DtD,YAAa,kBAAMA,EAAY,EAAEsD,IAAIpD,SAAUoB,IAA0BgC,EAAG7D,KAAK,UADjF,UAAsB6D,EAAtB,iBAMhB,cAAC3D,EAAA,EAAD,CAAQ9B,QAAQ,kBAAkB0F,OAAK,EAAC7C,QAAS,kBAxHnC,SAAC6B,GAEvB,IAAIC,EAAMD,EAAYE,QAAQ,SAAAvD,GAAC,MAAU,KAANA,KAEnCsD,EAAIE,OAGJ,IAAIC,EAAKH,EAAII,OAIb,QAAwBd,IAApBN,EAAamB,GAAkB,CAC/B,IAAIE,EAAUC,KAAKC,MAAMD,KAAKE,UAAUxB,IACxCqB,EAAQF,GAAKH,EACbf,EAAgBoB,GAChB,IAAII,EAAMtB,EAAQa,EAAIL,OAAQQ,EAAEO,QAAQ,IAAI,KAE5ClC,GAAU,EAAMiC,QAEhBE,QAAQC,IAAR,0BAA+BT,EAA/B,kCAqG2Da,CAAkB,CAACtC,EAAuBE,EAAwBE,KAAzH,wB,yCCjOVmC,GAAuBnG,IAAOC,IAAV,46BAqIXmG,GA3FQ,SAAC,GAUjB,IAAD,EATFC,EASE,EATFA,MACAC,EAQE,EARFA,kBAEAC,GAME,EAPFC,cAOE,EANFD,qBACAE,EAKE,EALFA,iBACAC,EAIE,EAJFA,cACAjD,EAGE,EAHFA,cACAC,EAEE,EAFFA,UACAjC,EACE,EADFA,cAEA,EAA0CqB,mBAAS,EAAC,GAAO,GAAO,IAAlE,mBAAO6D,EAAP,KAAsBC,EAAtB,KACIC,EAAkB,GAFpB,cAGcR,GAHd,IAGF,2BAAuB,CAAC,IAAbL,EAAY,QACnBa,EAAgBC,KAAK,CACjBC,MAAOf,EAAEJ,QAAQ,IAAK,KACtB5D,MAAOgE,KANb,8BAUF,IAMMgB,EAAsB,SAACpF,EAAGqF,GAC5B,IAAIC,EAAI,eAAQP,GAChBL,EAAkBW,GAClBC,EAAKD,IAAQC,EAAKD,GAClBL,EAAiBM,IAErB,OACI,cAACf,GAAD,UACI,eAACgB,EAAA,EAAD,WACI,cAACA,EAAA,EAAKjH,OAAN,qBACA,eAACiH,EAAA,EAAKC,KAAN,WACI,cAAC,EAAD,CAAW3F,cAAeA,IAC1B,eAAC4F,EAAA,EAAD,CAAMC,iBAAiB,WAAWrG,GAAG,2BAArC,UACI,cAACsG,EAAA,EAAD,CAAKC,SAAS,WAAWC,MAAM,WAA/B,SACI,sBAAKtG,UAAU,wBAAf,UACI,sBAAKA,UAAU,0BAAf,UACI,mBAAGA,UAAU,wBAAb,qBACA,cAAC,IAAD,CACIuG,gBAAgB,EAChBC,YAAad,EACbe,MA1BlB,SAAChG,GACf6E,EAAiB7E,EAAEI,QA0Ba6F,SAxBf,SAACjG,GAClB2E,EAAoB3E,EAAE,GAAGgE,QAAQ,IAAK,YA0Bd,sBAAKzE,UAAU,0BAAf,UACI,mBAAGA,UAAU,wBAAb,4BACA,sBAA2BA,UAAU,GAArC,UACI,cAACO,EAAA,EAAKoG,MAAN,CACIC,QAAM,EACNhB,MAAM,aACN5E,KAAK,WACLlB,GAAG,6BACH+G,SAAU,SAACpG,GAAD,OAAOoF,EAAoBpF,EAAG,MAE5C,cAACF,EAAA,EAAKoG,MAAN,CACIC,QAAM,EACNhB,MAAM,SACN5E,KAAK,WACLlB,GAAG,yBACH+G,SAAU,SAACpG,GAAD,OAAOoF,EAAoBpF,EAAG,MAE5C,cAACF,EAAA,EAAKoG,MAAN,CACIC,QAAM,EACNhB,MAAM,SACN5E,KAAK,WACLlB,GAAG,yBACH+G,SAAU,SAACpG,GAAD,OAAOoF,EAAoBpF,EAAG,QApBvC,2BA0BrB,cAAC2F,EAAA,EAAD,CAAKC,SAAS,WAAWC,MAAM,WAA/B,SACI,qBAAKtG,UAAU,wBAAf,SACI,cAAC,EAAD,CAAmBqC,MAAOkD,EAAejD,cAAeA,EAAgBC,UAAWA,oBCxI7GuE,ICC0BjI,IAAOC,IAAV,8Y,MCMHD,IAAOC,IAAV,yNCFSD,IAAOC,IAAV,+CHLFD,IAAOC,IAAV,grDAoGTiI,GA7BI,SAAC,GAAY,IAAXtD,EAAU,EAAVA,KACjB,OACI,eAACqD,GAAD,WACI,sBAAK9G,UAAU,wBAAf,UACI,qBAAKA,UAAS,kCAA6ByD,EAAKpC,SAAS2F,eAAzD,SAA2EvD,EAAKpC,WAChF,mBAAGrB,UAAU,gBAAb,SAA8ByD,EAAK6C,WAEvC,sBAAKtG,UAAU,wBAAf,UACQ,mBAAGA,UAAU,gBAAb,oBAE0B,IAAtByD,EAAKyB,MAAMxB,OACP,mDAEAD,EAAKyB,MAAMtB,KAAI,SAAAiB,GAAC,OACZ,qBAAK7E,UAAU,mBAAf,SAA2C6E,GAAJA,SAG3D,sBAAK7E,UAAU,wBAAf,UACQ,mBAAGA,UAAU,gBAAb,qBAEIyD,EAAKwD,OACL,oBAAGjH,UAAU,eAAb,cAA6B,wCAAmB,mBAAGA,UAAU,eAAb,SAA4B,gDIxF9FkH,GAAsBrI,IAAOC,IAAV,kWAyCVqI,GAvBK,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,eAAgBC,EAAoB,EAApBA,OAClC,OAAc,IADwC,EAAZC,OACd,6BAExB,cAACJ,GAAD,UACI,eAAClB,EAAA,EAAD,WACI,cAACA,EAAA,EAAKjH,OAAN,qBAGA,cAACiH,EAAA,EAAKC,KAAN,UAEkC,IAA1BmB,EAAe1D,OACf,mBAAG1D,UAAU,qBAAb,iCACAoH,EAAexD,KAAK,SAAAtC,GAChB,OAAO,cAAC,GAAD,CAAyBmC,KAAM4D,EAAO/F,IAAnBA,c,SCnChDiG,GAA2B1I,IAAOC,IAAV,ooFAoIf0I,GAtBO,SAAC,GAAsB,IAArBnG,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,KAC9B,OACI,cAACiG,GAAD,UACI,qBAAKvH,UAAS,sBAAiBqB,EAAS2F,cAAc,aAAtD,SACI,uBAAMS,MAAM,cAAZ,UACI,gCACI,mBAAGzH,UAAU,gBAAb,uBACA,oBAAGA,UAAS,0BAAqBqB,EAAS2F,eAA1C,qBAAoE3F,EAAS2F,oBAGjF,gCACI,mBAAGhH,UAAU,gBAAb,8BACA,mBAAGA,UAAS,yBAAZ,SACKsB,aAXUA,IC3GjCoG,GAAoB7I,IAAOC,IAAV,wRAiDR6I,GAnCG,SAAC,GAA2B,IAA1BlE,EAAyB,EAAzBA,KAAM8B,EAAmB,EAAnBA,cACtB,EAA0B5D,mBAAS,GAAnC,mBAAOiG,EAAP,KAAcC,EAAd,KACIC,EAAMvC,EAAc7B,OACpBqE,EAASD,EAAME,KAAKC,IAAIH,EAAK,GAAKE,KAAKC,IAAIH,EAAK,GAYpD,OAVA/F,qBAAU,WAEN,IADA,IAAImG,EAAI,EACR,MAAqB5E,OAAO6E,QAAQ1E,EAAK2E,WAAzC,eACI,IADC,IAAIC,EAAQ,KACb,MAAmB/E,OAAOC,KAAK8E,EAAS,IAAxC,eAA6C,CAA9B,KACXH,IAGRL,EAASK,MAIT,cAACR,GAAD,UACI,eAAC1B,EAAA,EAAD,WACI,eAACA,EAAA,EAAKjH,OAAN,gCAEI,cAACuJ,GAAA,EAAD,CAAalJ,QAAQ,OAAOmJ,IAAKX,EAAQG,IACzC,sCAAOH,EAAP,mBAAuBG,EAAvB,iBAEJ,cAAC/B,EAAA,EAAKC,KAAN,UACK3C,OAAOC,KAAKE,EAAK2E,WAAWxE,KAAI,SAAAyE,GAC7B,OAAO/E,OAAOC,KAAKE,EAAK2E,UAAUC,IAAWzE,KAAI,SAAA4E,GAC7C,OAAO,cAAC,GAAD,CAAiBnH,SAAUoC,EAAK2E,UAAUC,GAAUG,GAAQnH,SAAUC,KAAMkH,GAAaA,iB,SCpCtHC,GAAuB5J,IAAOC,IAAV,qQAyaX4J,GA7ZQ,WACnB,MAA0C/G,mBAAS,IAAnD,mBAAO0D,EAAP,KAAsBsD,EAAtB,KACA,EAAkChH,mBAAS,IAA3C,mBAAOiH,EAAP,KAAkBC,EAAlB,KACA,EAA4ClH,mBAAS,IAArD,mBAAOmH,EAAP,KAAuBC,EAAvB,KACA,EAA4DpH,mBAAS,IAArE,mBAAOqH,EAAP,KAA+BC,EAA/B,KACA,EAAoCtH,wBAAS0B,GAA7C,mBAAO6F,EAAP,KAAmBC,EAAnB,KACA,EAAsCxH,mBAAS,IAA/C,mBAAOyH,EAAP,KAAoBC,EAApB,KAGA,EAAwB1H,mBAAS,CAC7B2H,QAAS,GACTpE,MAAO,GACPkD,UAAW,CACP,aAAc,GACd,aAAc,GACd,aAAc,MANtB,mBAAO3E,EAAP,KAAa8F,EAAb,KAWA,EAAuD5H,mBAAS,IAAhE,mBAAO6H,EAAP,KAA4BC,EAA5B,KAcIC,EAAmBrF,KAAKC,MAAMD,KAAKE,UAAU6D,KA8B3CuB,EAA8B,WAEhC,QAAmBtG,IAAf6F,EAA2B,CAC3B,IAAIU,EAAoB,GACxB,IAAK,IAAIC,KAASf,EAKVxF,OAAOC,KAAK2F,GAAY1F,SAASqG,KAAWD,EAAkBpG,SAASqG,IACvED,EAAkBjE,KAAKkE,GAG/BZ,EAA0BW,QAE1BX,EAA0B3F,OAAOC,KAAKuF,KAW1CgB,EAAc,CACdC,UAAW,KACXC,UAAW,KACXtG,OAAQ,IACRuG,MAAO,KACPC,KAAM,KACNC,QAAS,IACTC,OAAQ,IACRC,QAAS,IACTC,MAAO,IACP,mBAAoB,KACpB,YAAa,KACbC,WAAY,KAIZhF,EAAgB,CAChB,KACA,KACA,IACA,KACA,KACA,IACA,IACA,IACA,IACA,KACA,KACA,KAGAiF,EAAkB,CAAC,aAAc,aAAc,cAG/CC,EAAe,WACf,IAAIC,EAAShB,OACMrG,IAAf6F,IACAwB,EAASxB,GAEb,IA7CkBnF,EAAK4G,EA6CnBC,EAAW,CACXtB,QAAS,GACTpE,MAAO,GACPkD,UAAW,CACP,aAAc,GACd,aAAc,GACd,aAAc,KAGtB,IAAK,IAAIyC,KAAKH,EAAQ,CAElB,IAFkB,EAEdxF,EAAQ,GAFM,cAGJwF,EAAOG,GAAGC,OAHN,IAGlB,2BAA+B,CAAC,IACxBC,EADuB,QACJtG,QAAQ,QAAS,IACnCmG,EAAS1F,MAAM1B,SAASuH,IACzBH,EAAS1F,MAAMS,KAAKoF,GACnB7F,EAAM1B,SAASuH,IAAiB7F,EAAMS,KAAKoF,IAPlC,8BAUlB,IAAIC,EAAUN,EAAOG,GAAG,mBAExB,IAAK,IAAI/K,KAAMkL,EAAS,CAAC,IAAD,gBACFA,EAAQlL,GAAImL,QADV,IACpB,2BAAsC,CAAC,IAAD,EAA7BC,EAA6B,QAE9BC,EAAkBD,EAAK,UAAcxH,OACrC0H,EAAmB,GAHW,cAKpBF,EAAK,WALe,IAKlC,2BAAkC,CAAC,IAA1BzK,EAAyB,QAC1BqH,EAAMsD,EAAiB1H,OAC3B,GAAIoE,EAAM,EAAG,CAELrH,EAAC,SAAaiD,OAAS,IA5E7BK,EA8EUqH,EA9ELT,EA+EKlK,EAAC,SAAaiD,OAFlB0H,EA5ExBC,MAAMV,GACDW,KADL,YACcvH,IACTwH,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAAOD,OAgFX,IATS,EASL7D,EAAQ,EATH,cAWWnH,EAAC,UAXZ,IAWT,2BAAmC,CAC/B,IADgC,IAA3BkL,EAA0B,QAEvBzD,EAAIN,EAAQE,EAChBI,EAAIN,EAAQE,EAAMA,EAClBI,IAEAkD,EAAiBlD,GAAGvC,KAChBmE,EAAY6B,IAGpB/D,KArBK,mCAuBN,CAAC,IAAD,gBACYnH,EAAC,UADb,IACH,2BAA8B,CAAC,IAAtBmL,EAAqB,QACtBC,EAAa,GACjBA,EAAWlG,KAAKmE,EAAY8B,IAC5BR,EAAiBzF,KAAKkG,IAJvB,iCA9BuB,8BAwClC,IAxCkC,EAwC9BC,EAAgB,GAxCc,cAyCpBV,GAzCoB,IAyClC,2BAAgC,CAAC,IAAxBW,EAAuB,QAE5BA,EAAE9H,MAAK,SAACuH,EAAGC,GAGP,OAFSlG,EAAcyG,QAAQR,GACtBjG,EAAcyG,QAAQP,MAGnC,IAP4B,EAOxBQ,EAAM,GAPkB,cAQbF,GARa,IAQ5B,2BAAkB,CACdE,GADc,SARU,8BAW5BH,EAAcnG,KAAKsG,IApDW,8BAwDlC,cAAgBH,EAAhB,eAA+B,CAA1B,IAAII,EAAG,UAKO7I,IAFXuH,EAAQ,UACJJ,EAAgBW,EAAkB,IACpCe,KAEFtB,EAAQ,UACJJ,EAAgBW,EAAkB,IACpCe,GAAO,CACL7K,SAAU,GACVoC,UAAMJ,IAO+B,IAFzCuH,EAAQ,UACJJ,EAAgBW,EAAkB,IACpCe,GAFF,SAEmBlK,cAAc,IAEjC4I,EAAQ,UACJJ,EAAgBW,EAAkB,IACpCe,GAFF,SAEqBxB,EAAOG,GAAGsB,SAOzB,IAJNvB,EAAQ,UACJJ,EAAgBW,EAAkB,IACpCe,GAFF,SAEmBlK,cACf0I,EAAOG,GAAGsB,YAGdvB,EAAQ,UACJJ,EAAgBW,EAAkB,IACpCe,GAFF,SAEqB,eAMF7I,IAFnBuH,EAAQ,UACJJ,EAAgBW,EAAkB,IACpCe,GAFF,KAIAtB,EAAQ,UACJJ,EAAgBW,EAAkB,IACpCe,GAFF,KAEiB,CAACrB,GAEjBD,EAAQ,UACLJ,EAAgBW,EAAkB,IACpCe,GAFD,KAEc1I,SAASqH,IAExBD,EAAQ,UACJJ,EAAgBW,EAAkB,IACpCe,GAFF,KAEevG,KAAKkF,KA5GZ,gCAmH5BtB,EAAQqB,IAmBRwB,EAAe,SAACvC,GAChB,GAAIT,EAAY1F,OAAS,IAAMgG,EAAiBG,GAAOwC,MAClDrF,cACAxD,SAAS4F,EAAYpC,eAClB,OAAO,EAEf,GAAI4B,EAAUlF,OAAS,IAAMkF,EAAUpF,SAASkG,EAAiBG,GAAOsC,UACpE,OAAO,EAGX,KAAI9G,EAAc3B,OAAS,GAAKgG,EAAiBG,GAAOiB,MAAMpH,OAAS,GAQnE,OAAO,EARgE,IAAD,gBAChDgG,EAAiBG,GAAOiB,OADwB,IACtE,2BAAqD,CAAC,IAC9CjG,EAD6C,QACjCJ,QAAQ,QAAS,IACjC,GAAIY,EAAc7B,SAASqB,GACvB,OAAO,GAJuD,8BAU1E,OAAO,GA+EX,OAtDA9C,qBAAU,WACN,IAAIuK,EAAuB,GAC3B,IAAK,IAAIzB,KAAKnB,EAAkB,CAE5B,IAF4B,EAExBxE,EAAQ,GAFgB,cAGdwE,EAAiBmB,GAAGC,OAHN,IAG5B,2BAAyC,CAAC,IAClCC,EADiC,QACdtG,QAAQ,QAAS,IACnChB,EAAKyB,MAAM1B,SAASuH,IACrBtH,EAAKyB,MAAMS,KAAKoF,GACf7F,EAAM1B,SAASuH,IAAiB7F,EAAMS,KAAKoF,IAPxB,8BAU5BuB,EAAoBzB,GAAK,CACrBxJ,SAAUqI,EAAiBmB,GAAGsB,SAC9B7F,MAAOoD,EAAiBmB,GAAGwB,MAC3BnH,MAAOA,EACP+B,OACI3D,OAAOC,KAAKmG,EAAiBmB,GAAG0B,QAAQC,cACnC9I,OAAS,GACdJ,OAAOC,KAAKmG,EAAiBmB,GAAG0B,QAAQE,aACnC/I,OAAS,GAG1BgB,QAAQC,IAAR,0BACAD,QAAQC,IAAK2H,GACb7C,EAAwB6C,GACxB7B,IACA/F,QAAQC,IAAI,kCACZD,QAAQC,IAAIlB,KAEb,IAGH1B,qBAAU,WACN2C,QAAQC,IAAI,8BACZD,QAAQC,IAAIU,GAhGH,WAET,GAA2B,IAAvB+D,EAAY1F,QAAqC,IAArBkF,EAAUlF,QAAyC,IAAzB2B,EAAc3B,OACpEyF,OAAc9F,OACX,CACH,IAAIqJ,EAAM,GACV,IAAK,IAAI7C,KAASH,EACV0C,EAAavC,KACb6C,EAAI7C,GAASH,EAAiBG,IAGtCV,EAAcuD,IAsFlB1I,KACD,CAACqB,EAAeuD,EAAWQ,IAE9BrH,qBAAU,WACN2C,QAAQC,IAAI,oBACZD,QAAQC,IAAIuE,GACZuB,IACA/F,QAAQC,IAAI,4CACZD,QAAQC,IAAIlB,GAEZkG,MACD,CAACT,IAEJnH,qBAAU,WACN4H,MACF,CAACb,IAIC,eAACL,GAAD,WACI,cAAC,GAAD,CACInI,cA9EU,SAACO,GACnB,IAAI8L,EAAU9L,EAAM+L,OACG,IAAnBD,EAAQjJ,QACR2F,EAAesD,IA4EXzH,MAAOzB,EAAKyB,MACZ2H,SAAUlE,EACVxD,kBA1Ec,SAAC2H,GACvB,IAAIC,EAAe,aACF,IAAbD,IAAgBC,EAAe,UAClB,IAAbD,IAAgBC,EAAe,UACnC,IAAIhH,EAAI,YAAO6C,GACToE,EAAQjH,EAAKiG,QAAQe,GACvBC,GAAS,EACTjH,EAAKkH,OAAOD,EAAO,GAEnBjH,EAAKJ,KAAKoH,GAEdlE,EAAa9C,IAgELgD,kBAAmBA,EACnB3D,oBA1Wc,SAACvE,GACvB,IAAIkF,EAAOV,EAAcrB,QAAO,SAACvD,GAAD,OAAOA,IAAMI,KAC7C8H,EAAiB5C,IAyWTT,iBAjXW,SAAC4H,GACf7H,EAAc7B,SAAS0J,IACxBvE,EAAiB,GAAD,mBAAKtD,GAAL,CAAoB6H,MAgXhC3H,cAAeA,EACfjD,cAAemB,EAAK2E,UACpB7F,UAtWiB,SAAC4K,EAAMpJ,GAChC,IADwC,EACpCqJ,EAAiB/I,KAAKC,MAAMD,KAAKE,UAAUuE,IADP,cAExB/E,GAFwB,IAExC,2BAAqB,CAAC,IAAbkI,EAAY,aAEW5I,IAAxByF,EAAemD,IACS,IAAxBnD,EAAemD,GAEXkB,EACAC,EAAenB,IAAQ,GAEvBmB,EAAenB,IAAQ,EACK,IAAxBmB,EAAenB,WACRmB,EAAenB,IAI1BkB,EACAC,EAAenB,GAAO,EAEtBvH,QAAQC,IAAR,6CAnB4B,8BAuBxCoE,EAAkBqE,MAiVd,sBAAKpN,UAAU,iBAAf,UAMI,cAAC,GAAD,CAAayD,KAAMA,EAAM8B,cAAeA,IACxC,cAAC,GAAD,CACI6B,eAAgB4B,EAChB3B,OAAQmC,WCrZb6D,OAhBf,WACE,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,iCACE,cAAC,EAAD,IACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW9E,OAEnC,cAAC,EAAD,WCPO+E,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAAS5G,OACP,cAAC,IAAM6G,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.274c7d95.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    :root {\r\n        box-sizing: border-box;\r\n        /* font-size: 62.5%; */\r\n    }\r\n    *,\r\n    ::before,\r\n    ::after {\r\n        box-sizing: inherit;\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n    body {\r\n        width:100%;\r\n        min-width: 28rem;\r\n        font-family: 'Kumbh Sans', sans-serif;\r\n        overflow-x: hidden;\r\n        transition: background-color ease-in-out 0.3s;\r\n\r\n        -webkit-touch-callout: none; /* iOS Safari */\r\n        -webkit-user-select: none; /* Safari */\r\n        -khtml-user-select: none; /* Konqueror HTML */\r\n        -moz-user-select: none; /* Old versions of Firefox */\r\n            -ms-user-select: none; /* Internet Explorer/Edge */\r\n                user-select: none; /* Non-prefixed version, currently\r\n                                    supported by Chrome, Edge, Opera and Firefox */\r\n                                    \r\n    }\r\n    a {\r\n        text-decoration: none;\r\n    }\r\n    /* width */\r\n    ::-webkit-scrollbar {\r\n        width: 1rem;\r\n    }\r\n\r\n    /* Track */\r\n    ::-webkit-scrollbar-track {\r\n        background: darkgray;\r\n    }\r\n\r\n    /* Handle */\r\n    ::-webkit-scrollbar-thumb {\r\n        background: gray;\r\n        border-radius: 1rem;\r\n    }\r\n\r\n    /* Handle on hover */\r\n    ::-webkit-scrollbar-thumb:hover {\r\n        background: rgb(84, 84, 84);\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","export default __webpack_public_path__ + \"static/media/favicon.e12669f7.ico\";","// boostrap components\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n// import misc\r\nimport logo from '../resources/imgs/favicon.ico';\r\n// styled components\r\nimport styled from 'styled-components';\r\n\r\nconst StyledNav = styled.div`\r\n    .navbar {\r\n       padding: 1rem 4rem 1.5rem 4rem; \r\n\r\n       .nav-link {\r\n            margin: 0.5rem 1rem 0 0;\r\n       }\r\n    }\r\n   \r\n`;\r\n\r\nvar Header = () => {\r\n    return (\r\n        <StyledNav>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"#home\">\r\n                    <img src={logo} alt=\"logo\" width=\"35px\" /> &nbsp;\r\n                    Are-We-There-Yet\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                    </Nav>\r\n                    <Nav>\r\n                        <Nav.Link href=\"#gettingStarted\">Geeting Started</Nav.Link>\r\n                        <Nav.Link href=\"#coverage\"> Explore by Coverage </Nav.Link>\r\n                        <Nav.Link href=\"#encodings\"> Explore by Encodings </Nav.Link>\r\n                        <Nav.Link href=\"#dataTypes\"> Explore by DataTypes </Nav.Link>\r\n                        <Nav.Link href=\"#About Us\"> About Us </Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </StyledNav>\r\n    );\r\n}\r\n\r\nexport default Header;","// styled components\r\nimport styled from 'styled-components';\r\n\r\nconst StyledFooter = styled.div`\r\n    height: 1.5rem;\r\n    width: 100vw;\r\n   color: darkgrey;\r\n    text-align: center;\r\n`;\r\n\r\nvar Footer = () => {\r\n    return (\r\n        <StyledFooter>\r\n           Footer placeholder\r\n        </StyledFooter>\r\n    );\r\n}\r\n\r\nexport default Footer;","// local components\r\n// bootstrap components\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n// import misc\r\n// styled components\r\nimport styled from 'styled-components';\r\n\r\nconst StyledSearchBar = styled.div`\r\n    width: 100%;\r\n    position: relative;\r\n    margin: 20px 0 20px 0;\r\n\r\n    .search-form {\r\n        display: flex;\r\n        justify-content: center;\r\n\r\n        .form-label{\r\n            font-weight: 500;\r\n        }\r\n\r\n        .search-form-icon {\r\n            position: absolute;\r\n            font-size: 1.2rem;\r\n            top: 0.5rem;\r\n            left: 15.3rem;\r\n            color: grey;\r\n        }\r\n        .search-form-input {\r\n            margin: 0 1rem;\r\n            padding: 0 0 0 2.5rem;\r\n            width: calc(100% - 22rem);\r\n        }\r\n\r\n        .search-form-btn {\r\n            width: 6rem;\r\n        }\r\n    }\r\n`;\r\n\r\nvar SearchBar = ({ searchByTitle }) => {\r\n    const handleSearch = (e) => {\r\n        e.preventDefault();\r\n        searchByTitle(e.target.elements[0].value);  \r\n    };\r\n    return (\r\n        <StyledSearchBar>\r\n            <Form className='search-form' onSubmit={handleSearch}>\r\n                <Form.Label>Query by Terms in Paper Title:</Form.Label>\r\n                <i className='fas fa-search search-form-icon'></i>\r\n                <Form.Control\r\n                    className='search-form-input'\r\n                    type='text'\r\n                    placeholder=''\r\n                />\r\n                <Button\r\n                    className='search-form-btn'\r\n                    variant='primary'\r\n                    type='submit'>\r\n                    {' '}\r\n                    Search{' '}\r\n                </Button>\r\n            </Form>\r\n        </StyledSearchBar>\r\n    );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { useEffect } from \"react\";\r\n// styled components\r\nimport styled from 'styled-components';\r\n\r\nconst StyledCellContainer = styled.div`\r\n    .grid-values {\r\n        border: solid 0.5px white;\r\n        height: 2.4rem;\r\n    }\r\n    \r\n    .active-value {\r\n        cursor: pointer;\r\n        color: black;\r\n        padding: 7px;\r\n    }\r\n\r\n    .coverage-experiment-active {\r\n        background-color: rgb(77, 171, 214);\r\n    }\r\n\r\n    .coverage-experiment-deactive {\r\n        cursor: pointer;\r\n        color: lightblue;\r\n        background-color: lightblue;\r\n    }\r\n\r\n    .coverage-experiment-deactive:hover {\r\n        color: #70C2E8;\r\n        background-color: #70C2E8;\r\n    }\r\n\r\n    .coverage-hybrid-active {\r\n        background-color: rgb(141, 204, 108);\r\n    }\r\n\r\n    .coverage-hybrid-deactive {\r\n        color: rgb(181, 237, 152);\r\n        background-color: rgb(181, 237, 152);\r\n    }\r\n\r\n    .coverage-hybrid-deactive:hover {\r\n        color: rgb(162, 222, 131);\r\n        background-color: rgb(162, 222, 131);\r\n    }\r\n\r\n    .coverage-theory-active {\r\n        background-color: rgb(235, 196, 96);\r\n    }\r\n\r\n    .coverage-theory-deactive {\r\n        cursor: pointer;\r\n        color: rgb(250, 224, 152);\r\n        background-color: rgb(250, 224, 152);\r\n    }\r\n\r\n    .coverage-theory-deactive:hover {\r\n        color: rgb(245, 210, 118);\r\n        background-color: rgb(245, 210, 118);\r\n    }\r\n\r\n    .coverage-none {\r\n        color: lightgrey;\r\n        background-color: lightgrey;\r\n    }\r\n\r\n    .coverage-none:hover {\r\n        color: #70C2E8;\r\n        background-color: #70C2E8;\r\n    }\r\n\r\n    .coverage-none-active {\r\n        background-color: rgb(77, 171, 214);\r\n    }\r\n\r\n    .coverage-none-deactive {\r\n        cursor: pointer;\r\n        color: lightgrey;\r\n        background-color: lightgrey;\r\n    }\r\n\r\n    .coverage-none-deactive:hover {\r\n        color: #70C2E8;\r\n        background-color: #70C2E8;\r\n    }\r\n\r\n`;\r\n\r\nvar CoverageCell = ({category, name, handleClick, status, isActive, type}) => {\r\n    const [active, setActive] = React.useState(status);\r\n\r\n    let clickEvent = () => {\r\n        setActive(!active);\r\n        handleClick(!active, name);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setActive(status);\r\n    }, [status]);\r\n\r\n    if (category.localeCompare(\"coverage-none\") === 0) {\r\n        // filter matrix cell have states depends on parent component\r\n        if (type === 'filter') {\r\n            return (\r\n                <StyledCellContainer>\r\n                    <div className={`grid-values ${isActive ? \"coverage-none-active active-value\" : \"coverage-none-deactive\"}`} onClick={() => handleClick()}>\r\n                        {isActive ? <i className=\"fas fa-check\"></i> : <p>X</p>}\r\n                    </div>\r\n                </StyledCellContainer>\r\n                \r\n            );\r\n        }\r\n\r\n        return (<StyledCellContainer>\r\n        {/* <div className={`grid-values ${category} active-value`} onClick={() => clickEvent()}>\r\n            X\r\n        </div> */}\r\n        <div className={`grid-values ${active ? \"coverage-none-active active-value\" : \"coverage-none-deactive\"}`} onClick={() => clickEvent()}>\r\n            {active ? <i className=\"fas fa-check\"></i> : <p>X</p>}\r\n        </div>\r\n    </StyledCellContainer>);\r\n    }\r\n    \r\n    return (\r\n        <StyledCellContainer key={name}>\r\n            <div className={`grid-values ${active ? category+\"-active active-value\" : category+\"-deactive\"}`} onClick={() => clickEvent()}>\r\n               {active ?  <i className=\"fas fa-check\"></i> : <p>X</p> }\r\n            </div>\r\n\r\n        </StyledCellContainer>\r\n    );\r\n   \r\n}\r\n\r\nexport default CoverageCell;","import React, { useState } from 'react';\r\n// import ReactDOM from \"react-dom\";\r\n// local components\r\nimport CoverageCell from './CoverageCell';\r\n// bootstrap components\r\nimport Button from 'react-bootstrap/Button';\r\n// npm-installed component\r\n// Read more here: https://www.npmjs.com/package/react-tag-autocomplete\r\n\r\n// import misc\r\n// styled components\r\nimport styled from 'styled-components';\r\n\r\nconst StyledCoverageSelection = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    .coverage-selection-list-wrapper {\r\n        margin-right: 100px;\r\n    }\r\n    .coverage-selection-lable {\r\n        font-weight: 600;\r\n        font-size: 18;\r\n        margin-bottom: 5px;\r\n    }\r\n    .coverage-selection-list {\r\n        display: flex;\r\n        flex-direction: column;\r\n        \r\n        .coverage-selection-item {\r\n            display: flex;\r\n            flex-direction: row;\r\n            align-items: center;\r\n\r\n            .tag-styled-text {\r\n                margin: 5px;\r\n                padding: 5px 10px;\r\n                background-color: lightgray;\r\n                border-radius: 5px;\r\n                font-size: 12px;\r\n            }\r\n            \r\n            i {\r\n                padding: 0 10px 0 10px;\r\n                color: darkgray;\r\n                cursor: pointer;\r\n            }\r\n\r\n            i:hover {\r\n                color: gray;\r\n            }\r\n\r\n        }\r\n        \r\n\r\n    }\r\n \r\n    .coverage-selection-matrix-row {\r\n        display: flex;\r\n        min-width: 600px;\r\n        width: 50%;\r\n\r\n        .coverage-selection-top-lable {\r\n            padding-top: 40px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n        }\r\n        .coverage-selection-lable {\r\n            font-size: 16px;\r\n            align-self: center;\r\n            font-weight: 600;\r\n        }\r\n    }\r\n`;\r\n\r\nconst StyledCoverageContainer = styled.div`\r\n    \r\n    width: min-content;\r\n    padding: 1rem 0rem;\r\n    margin: auto;\r\n\r\n    .matrix-1d {\r\n        display: grid;\r\n        grid-template-columns: repeat(12, 2.2rem);\r\n    }\r\n\r\n    .matrix-2d {\r\n        display: grid;\r\n        grid-template-columns: repeat(13, 2.2rem);\r\n    }\r\n\r\n    .grid-titles {\r\n        justify-self: center;\r\n        align-self: center;\r\n    }\r\n`;\r\n\r\nconst CoverageSelection = ({types, coverage_data, modPapers}) => {\r\n    let gridStatus = {};\r\n    // variables tracks which are selected on each row\r\n    const [selectedFirstEncoding, setSelectedFirstEncoding] = useState(\"\");\r\n    const [selectedSecondEncoding, setSelectedSecondEncoding] = useState(\"\");\r\n    const [selectedThirdEncoding, setSelectedThirdEncoding] = useState(\"\");\r\n    // a list that record all selected encoding combinations\r\n    // it's an object with \r\n    //    keys = sorted,concatenated encoding,\r\n    //    values = sorted array of non-emplty selection\r\n    const [encodingList, setEncodingList] = useState({});\r\n\r\n    // toggle selection for encodings\r\n    const handleClick = (num, name) => {\r\n        if (num === 1) {\r\n            if (selectedFirstEncoding === name) setSelectedFirstEncoding('');\r\n            else setSelectedFirstEncoding(name);\r\n        } else if (num === 2) {\r\n            if (selectedSecondEncoding === name) setSelectedSecondEncoding('');\r\n            else setSelectedSecondEncoding(name);\r\n        } else if (num === 3) {\r\n            if (selectedThirdEncoding === name) setSelectedThirdEncoding('');\r\n            else setSelectedThirdEncoding(name);\r\n        }\r\n    };\r\n\r\n    const addToEncodingList = (combination) => {\r\n        // ignore unselected fields\r\n        let arr = combination.filter( e => e !== '');\r\n        // sort in alphabetical order\r\n        arr.sort();\r\n        \r\n        // create key\r\n        var k =  arr.join();\r\n\r\n        // if such key doesn't exist in the list, \r\n        // create a new object with new k-v pair and update old list.\r\n        if (encodingList[k] === undefined) {\r\n            let newList = JSON.parse(JSON.stringify(encodingList));\r\n            newList[k] = arr;\r\n            setEncodingList(newList);\r\n            let lst = getData(arr.length, k.replace(',',''));\r\n            // add related papers\r\n            modPapers(true, lst);\r\n        } else {\r\n            console.log(`Error: the key '${k}' already exists in the list.`);\r\n        }\r\n    };\r\n\r\n    const removeFromEncodingList = (combination) => {\r\n        // ignore unselected fields\r\n        let arr = combination.filter( e => e !== '');\r\n        // sort in alphabetical order\r\n        arr.sort();\r\n        \r\n        // create key\r\n        var k =  arr.join();\r\n        // if such key exists in the list, \r\n        // create a new object without such k-v pair and update old list.\r\n        if (encodingList[k] !== undefined) {\r\n            let newList = JSON.parse(JSON.stringify(encodingList));\r\n            delete newList[k];\r\n            setEncodingList(newList);\r\n            let lst = getData(arr.length, k.replace(',',''));\r\n            // remove related papers\r\n            modPapers(false, lst);\r\n        } else {\r\n            console.log(`Error: Cant remove key '${k}', it does not exist exists in the list.`);\r\n        }\r\n    };\r\n\r\n    let getData = (num, key) => {\r\n        let coverage = coverage_data[`${num}-encoding`];\r\n        if (coverage !== undefined && Object.keys(coverage).includes(key) && coverage[key].data.length > 0) {\r\n            return coverage[key].data;\r\n        } else {\r\n            return [];\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <StyledCoverageSelection>\r\n            {Object.values(encodingList).length === 0 ?\r\n                ''\r\n                :\r\n                <div className=\"coverage-selection-list-wrapper\">\r\n                    <p className=\"coverage-selection-lable\">Selected Encodings Designs:</p>\r\n                    <div className=\"coverage-selection-list\">\r\n                        {\r\n                            Object.values(encodingList).map( item => {\r\n                                return (\r\n                                    <div className=\"coverage-selection-item\">\r\n                                        {item.map( e => (<p key={`${e}-1`} className=\"tag-styled-text\">{e}</p>))}\r\n                                        <i className=\"fas fa-times-circle\" onClick={() => removeFromEncodingList(item)}></i>\r\n                                    </div>\r\n                                );\r\n                            })\r\n                        }\r\n                        \r\n                    </div>\r\n                </div>\r\n            }\r\n            <div className=\"coverage-selection-select-matrix\">\r\n            <p className=\"coverage-selection-lable\">Add an Encodings Design:</p>\r\n                <div className=\"coverage-selection-matrix-row\">\r\n                    <p className=\"coverage-selection-top-lable\">1st Encoding</p>\r\n                    <StyledCoverageContainer>\r\n                        <div className=\"matrix-1d\">\r\n                            {types.map((t) => \r\n                                (<div className=\"grid-titles\" key={`title-${t}`}>{t}</div>))}\r\n                            {types.map((t) => {\r\n                                gridStatus[t] = false;\r\n                                return (\r\n                                <CoverageCell key={`${t}-2`} category='coverage-none' name={t} \r\n                                handleClick={() => handleClick(1,t)} isActive={selectedFirstEncoding === t} type=\"filter\"/>);\r\n                            })}\r\n                        </div>\r\n                    </StyledCoverageContainer>\r\n                </div>\r\n                <div className=\"coverage-selection-matrix-row\">\r\n                    <p className=\"coverage-selection-lable\">2nd Encoding</p>\r\n                    <StyledCoverageContainer>\r\n                        <div className=\"matrix-1d\">\r\n                            {types.map((t) =>{\r\n                                gridStatus[t] = false;\r\n                                return (\r\n                                <CoverageCell key={`${t}-3`} category='coverage-none' name={t} \r\n                                handleClick={() => handleClick(2,t)} isActive={selectedSecondEncoding === t} type=\"filter\" />);\r\n                            })}\r\n                        </div>\r\n                    </StyledCoverageContainer>\r\n                </div>\r\n                <div className=\"coverage-selection-matrix-row\">\r\n                    <p className=\"coverage-selection-lable\">3rd Encoding</p>\r\n                    <StyledCoverageContainer>\r\n                        <div className=\"matrix-1d\">\r\n                            {types.map((t) =>{\r\n                                gridStatus[t] = false;\r\n                                return (\r\n                                <CoverageCell key={`${t}-4`} category='coverage-none' name={t} \r\n                                handleClick={() => handleClick(3,t)} isActive={selectedThirdEncoding === t} type=\"filter\" />);\r\n                            })}\r\n                        </div>\r\n                    </StyledCoverageContainer>\r\n                </div>\r\n                <Button variant=\"outline-primary\" block onClick={() => addToEncodingList([selectedFirstEncoding, selectedSecondEncoding, selectedThirdEncoding])}>Add</Button>\r\n            </div>\r\n        </StyledCoverageSelection>\r\n    );\r\n};\r\n\r\nexport default CoverageSelection;\r\n","import React, { useState } from 'react';\r\n// import ReactDOM from \"react-dom\";\r\n// local components\r\nimport CoverageSelection from './CoverageSelection';\r\nimport SearchBar from './SearchBar';\r\n// bootstrap components\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Autocomplete from '@celebryts/react-autocomplete-tags';\r\n// npm-installed component\r\n// Read more here: https://www.npmjs.com/package/react-tag-autocomplete\r\n\r\n// import misc\r\n// styled components\r\nimport styled from 'styled-components';\r\n\r\nconst StyledCoverageFilter = styled.div`\r\n    width: 100%;\r\n    margin: 2rem 0 2rem !important;\r\n\r\n    .card-header {\r\n        padding: 0.5rem 0 0.5rem 1rem;\r\n        font-weight: 600;\r\n    }\r\n\r\n    .card-body {\r\n        padding: 0.5rem 1.5rem 0.5rem 1.5rem;\r\n\r\n        .tab-content-container {\r\n            margin: 40px;\r\n        }\r\n        .card-body-input-wrapper {\r\n            display: flex;\r\n            flex-direction: row;\r\n            flex-wrap: wrap;\r\n            margin: 1rem 0;\r\n\r\n            .card-body-input-label {\r\n                margin: 0 1rem 0 0;\r\n                font-weight: 600;\r\n\r\n            }\r\n\r\n            .react-tag-input {\r\n                padding: 0 0 0 0.5rem;\r\n                .react-tag-input__tag,\r\n                .react-tag-input__input {\r\n                    padding: 0 0 0 0.5rem;\r\n                }\r\n            }\r\n\r\n            .form-check {\r\n                margin: 0 1rem 0 0;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst CoverageFilter = ({\r\n    tasks,\r\n    searchByPaperType,\r\n    selectedTasks,\r\n    deleteSelectedTasks,\r\n    addSelectedTasks,\r\n    encodingTypes,\r\n    coverage_data,\r\n    modPapers,\r\n    searchByTitle\r\n}) => {\r\n    const [paperCheckbox, setPaperCheckbox] = useState([false, false, false]);\r\n    let taskSuggestions = [];\r\n    for (const t of tasks) {\r\n        taskSuggestions.push({\r\n            label: t.replace('-', ' '),\r\n            value: t,\r\n        });\r\n    }\r\n\r\n    const handleAdd = (e) => {\r\n        addSelectedTasks(e.value);\r\n    };\r\n    const handleDelete = (e) => {\r\n        deleteSelectedTasks(e[0].replace(' ', '-'));\r\n    };\r\n    const handlePaperCheckbox = (e, idx) => {\r\n        let temp = { ...paperCheckbox };\r\n        searchByPaperType(idx);\r\n        temp[idx] = !temp[idx];\r\n        setPaperCheckbox(temp);\r\n    };\r\n    return (\r\n        <StyledCoverageFilter>\r\n            <Card>\r\n                <Card.Header>Filter</Card.Header>\r\n                <Card.Body>\r\n                    <SearchBar searchByTitle={searchByTitle} />\r\n                    <Tabs defaultActiveKey=\"filter-1\" id=\"uncontrolled-tab-example\">\r\n                        <Tab eventKey=\"filter-1\" title=\"Filter-1\">\r\n                            <div className='tab-content-container'>\r\n                                <div className='card-body-input-wrapper'>\r\n                                    <p className='card-body-input-label'>Tasks: </p>\r\n                                    <Autocomplete\r\n                                        allowCreateTag={false}\r\n                                        suggestions={taskSuggestions}\r\n                                        onAdd={handleAdd}\r\n                                        onDelete={handleDelete}\r\n                                    />\r\n                                </div>\r\n                                <div className='card-body-input-wrapper'>\r\n                                    <p className='card-body-input-label'> Paper Types: </p>\r\n                                    <div key='inline-checkbox' className=''>\r\n                                        <Form.Check\r\n                                            inline\r\n                                            label='experiment'\r\n                                            type='checkbox'\r\n                                            id='inline-checkbox-experiment'\r\n                                            onChange={(e) => handlePaperCheckbox(e, 0)}\r\n                                        />\r\n                                        <Form.Check\r\n                                            inline\r\n                                            label='theory'\r\n                                            type='checkbox'\r\n                                            id='inline-checkbox-theory'\r\n                                            onChange={(e) => handlePaperCheckbox(e, 1)}\r\n                                        />\r\n                                        <Form.Check\r\n                                            inline\r\n                                            label='hybrid'\r\n                                            type='checkbox'\r\n                                            id='inline-checkbox-hybrid'\r\n                                            onChange={(e) => handlePaperCheckbox(e, 2)}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Tab>\r\n                        <Tab eventKey=\"filter-2\" title=\"Filter-2\">\r\n                            <div className='tab-content-container'>\r\n                                <CoverageSelection types={encodingTypes} coverage_data={coverage_data}  modPapers={modPapers} />\r\n                            </div>\r\n                        </Tab>\r\n                    </Tabs>\r\n                    \r\n                </Card.Body>\r\n            </Card>\r\n        </StyledCoverageFilter>\r\n    );\r\n};\r\n\r\nexport default CoverageFilter;\r\n","import React from \"react\";\r\n// styled components\r\nimport styled from 'styled-components';\r\n\r\nconst StyledPaperDetails = styled.div`\r\n   background-color: rgb(227, 227, 227);\r\n   padding: 1rem;\r\n   border-radius: 0.5rem;\r\n   margin-bottom: 1rem;\r\n   \r\n   .details-top-container {\r\n       display: flex;\r\n       min-height: 2rem;\r\n       font-weight: bold;\r\n\r\n        .details-tag {\r\n            border-radius: 0.3rem;\r\n            padding: 0.3rem 0.4rem;\r\n            margin: 0 1rem 0 0;\r\n            width: fit-content;\r\n            height: 2rem;\r\n        }\r\n        .details-tag-experiment {\r\n            background-color: lightblue;\r\n        }\r\n        .details-tag-theory {\r\n            background-color: rgb(250, 224, 152);\r\n        }\r\n        .details-tag-hybrid {\r\n            background-color: rgb(181, 237, 152);\r\n        }\r\n\r\n       .details-title {\r\n           margin: 0.3rem 0 0 0;\r\n       }\r\n   }\r\n\r\n   .details-mid-container {\r\n        display:flex;\r\n        font-weight: bold;\r\n        margin: 0.8rem 0 0.8rem 0;\r\n\r\n        .details-title {\r\n            margin: 0.2rem 0 0 0;\r\n        }\r\n        .details-tag-task {\r\n            border-radius: 0.3rem;\r\n            padding: 0.3rem 0.4rem;\r\n            margin: 0 1rem 0 0;\r\n            width: fit-content;\r\n            height: 2rem;\r\n            margin: 0 0 0 0.5rem;\r\n            background-color: rgb(201, 201, 201);\r\n        }\r\n   }\r\n\r\n   .details-bot-container {\r\n        display:flex;\r\n        font-weight: bold;\r\n        .details-title {\r\n            margin: 0.2rem 0 0 0;\r\n        }\r\n        .fas {\r\n            display: flex;\r\n            margin: 0.4rem 0 0 1rem;\r\n            p {\r\n                margin: 0 0 0 0.4rem;\r\n                font-family: 'Kumbh Sans',sans-serif;\r\n                font-weight: 500;\r\n            }\r\n        }\r\n   }\r\n\r\n`;\r\n\r\nvar PaperDetails = ({data}) => {\r\n    return (\r\n        <StyledPaperDetails>\r\n            <div className=\"details-top-container\">\r\n                <div className={`details-tag details-tag-${data.category.toLowerCase()}`}>{data.category}</div>\r\n                <p className=\"details-title\">{data.title}</p>\r\n            </div>\r\n            <div className=\"details-mid-container\">\r\n                    <p className=\"details-title\">Tasks:</p>\r\n                    {\r\n                        data.tasks.length === 0 ?\r\n                            <p>No tasks available</p>\r\n                            :\r\n                            data.tasks.map(t => \r\n                                <div className=\"details-tag-task\" key={t}>{t}</div>)\r\n                    }\r\n            </div>\r\n            <div className=\"details-bot-container\">\r\n                    <p className=\"details-title\">Ranked:</p>\r\n                    {\r\n                        data.ranked ?\r\n                        <i className=\"fas fa-check\"> <p>True</p></i>  : <i className=\"fas fa-times\"><p> False</p></i>\r\n                    }\r\n            </div>\r\n\r\n        </StyledPaperDetails>\r\n    );\r\n}\r\n\r\nexport default PaperDetails;","import React from \"react\";\r\nimport CoverageCell from './CoverageCell';\r\n// styled components\r\nimport styled from 'styled-components';\r\n\r\nconst StyledCoverageContainer = styled.div`\r\n    \r\n    width: min-content;\r\n    padding: 1rem 0rem;\r\n    margin: auto;\r\n\r\n    .matrix-1d {\r\n        display: grid;\r\n        grid-template-columns: repeat(12, 2.2rem);\r\n    }\r\n\r\n    .matrix-2d {\r\n        display: grid;\r\n        grid-template-columns: repeat(13, 2.2rem);\r\n    }\r\n\r\n    .grid-titles {\r\n        justify-self: center;\r\n        align-self: center;\r\n    }\r\n`;\r\n\r\nvar CoverageMatrix = (props) => {\r\n    let rowTemp = [\"\"];\r\n    let gridStatus = {};\r\n    \r\n    rowTemp = rowTemp.concat(props.types);\r\n    var i = 0;\r\n    var j = 0;\r\n\r\n    let getCoverageCategory = (str) => {\r\n        if (Object.keys(props.data).includes(str) && props.data[str].category.length > 0) {\r\n            return 'coverage-' + props.data[str].category.toLowerCase();\r\n        } else {\r\n            return 'coverage-none';\r\n        }\r\n    };\r\n\r\n    let getData = (key) => {\r\n        if (Object.keys(props.data).includes(key) && props.data[key].data.length > 0) {\r\n            return props.data[key].data;\r\n        } else {\r\n            return [];\r\n        }\r\n    };\r\n\r\n    let handleClick = (add, key) => {\r\n        // update selection\r\n        let lst = getData(key);\r\n        props.modPapers(add, lst);\r\n    }\r\n\r\n    if (props.eventKey === \"1\") {\r\n        return (\r\n            <StyledCoverageContainer>\r\n                <div className=\"matrix-1d\">\r\n                    {props.types.map((t) => \r\n                        (<div className=\"grid-titles\" key={`title-${t}`}>{t}</div>))}\r\n                    {props.types.map((t) =>{\r\n                        gridStatus[t] = false;\r\n                        let category = getCoverageCategory(t);\r\n                        return (\r\n                        <CoverageCell category={category} name={t} \r\n                        handleClick={handleClick}/>);\r\n                    })}\r\n                </div>\r\n            </StyledCoverageContainer>);\r\n            \r\n    } else {\r\n        return (\r\n            <StyledCoverageContainer>\r\n                <div className=\"matrix-2d\">\r\n                    \r\n                    { // first row title\r\n                    rowTemp.map((t) => \r\n                        (<div className=\"grid-titles\" key={`title-${t}`}>{t}</div>))}\r\n                    {\r\n                    rowTemp.map((t) => {\r\n                        return rowTemp.map((t1) => {\r\n                            if (j < rowTemp.length) {\r\n                                let res = undefined;\r\n                                // column titles\r\n                                if (t1 === \"\") {\r\n                                    i++;\r\n                                    res = (<div className=\"grid-titles\" key={`${i}-${j}`}>{rowTemp[j+1]}</div>);\r\n                                // table contents\r\n                                } else {\r\n                                    if (rowTemp[i] !== undefined && rowTemp[j+1] !== undefined) {\r\n                                        let key = rowTemp[i]+rowTemp[j+1];\r\n                                        let category = getCoverageCategory(key);\r\n                                        gridStatus[key] = false;\r\n\r\n                                        res = (\r\n                                            <CoverageCell category={category} name={key} handleClick={handleClick} />);\r\n                                            i++;\r\n                                    } else {\r\n                                        res = <></>;\r\n                                    }\r\n                                    \r\n                                }\r\n\r\n                                // reset i when out of bound\r\n                                if (i >= rowTemp.length) {\r\n                                    i = 0;\r\n                                    j++;\r\n                                }\r\n                                return res;\r\n                            \r\n                            // hide extra row\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        });\r\n                    })}\r\n                </div>\r\n            </StyledCoverageContainer>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\nexport default CoverageMatrix;","import React from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\n// local components\r\nimport CoverageMatrix from \"./CoverageMatrix\";\r\n// bootstrap components\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\n// styled components\r\nimport styled from 'styled-components';\r\n\r\nconst StyledCoverageTab = styled.div`\r\n    .coverage-toggle {\r\n        font-weight: 600;\r\n        padding: .5rem 1rem.5rem;\r\n        width: 100%;\r\n        text-align: start;\r\n    }\r\n    .card-body {\r\n        padding: 0;\r\n    }\r\n`;\r\n\r\nvar CoverageTab = (props) => {\r\n    // let encodingTypes = [\"PX\", \"PY\", \"L\", \"An\", \"Ar\", \"T\", \"V\", \"D\", \"S\", \"CS\", \"CH\", \"O\"]; \r\n    return (\r\n        <StyledCoverageTab>\r\n            <Card>\r\n                <Card.Header>\r\n                <Accordion.Toggle className=\"coverage-toggle\" as={Button} variant=\"link\" eventKey={props.eventKey}>\r\n                    {props.title}\r\n                </Accordion.Toggle>\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey={props.eventKey}>\r\n                <Card.Body>\r\n                    <CoverageMatrix eventKey={props.eventKey} types={props.encodingTypes} data={props.coverage_data} modPapers={props.modPapers}/>\r\n                </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n            \r\n        </StyledCoverageTab>\r\n    );\r\n}\r\n\r\nexport default CoverageTab;","import React from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\n// local components\r\nimport CoverageTab from './CoverageTab';\r\n// bootstrap components\r\nimport Accordion from 'react-bootstrap/Accordion';\r\n// styled components\r\nimport styled from 'styled-components';\r\n\r\nconst StyledCoverageContainer = styled.div`\r\n    width: 30rem;\r\n`;\r\n\r\nvar CoverageContainer = ({coverage_data, encodingTypes, modPapers}) => {\r\n    return (\r\n        <StyledCoverageContainer>\r\n            <Accordion defaultActiveKey=\"1\">\r\n                <CoverageTab key=\"1\" title=\"1-Encoding Coverage\" eventKey=\"1\" coverage_data={coverage_data.coverages[\"1-encoding\"]} encodingTypes={encodingTypes} modPapers={modPapers}/>\r\n                <CoverageTab key=\"2\" title=\"2-Encoding Coverage\" eventKey=\"2\" coverage_data={coverage_data.coverages[\"2-encoding\"]} encodingTypes={encodingTypes} modPapers={modPapers} />\r\n                <CoverageTab key=\"3\" title=\"3-Encoding Coverage\" eventKey=\"3\" coverage_data={coverage_data.coverages[\"3-encoding\"]} encodingTypes={encodingTypes} modPapers={modPapers}/>\r\n            </Accordion>\r\n        </StyledCoverageContainer>\r\n    );\r\n}\r\n\r\nexport default CoverageContainer;","import React from \"react\";\r\n// bootstrap components\r\nimport Card from 'react-bootstrap/Card';\r\n// local component\r\nimport PaperDetails from './PaperDetails';\r\n// styled components\r\nimport styled from 'styled-components';\r\n\r\nconst StyledPapersSection = styled.div`\r\n    /* width: calc(100% - 32rem); */\r\n    width: 100%;\r\n    .card {\r\n        max-height: 45.23rem;\r\n        overflow-y: auto;\r\n    }\r\n    .paper-toggle {\r\n        font-weight: 600;\r\n        padding: .5rem 1rem.5rem;\r\n        width: 100%;\r\n        text-align: start;\r\n    }\r\n    .card-body {\r\n        /* padding: 0; */\r\n    }\r\n`;\r\n\r\nvar PapersSection = ({selected_paper, papers, render}) => {\r\n    if(render === false) return <></>;\r\n    return (\r\n        <StyledPapersSection>\r\n            <Card>\r\n                <Card.Header>\r\n                    Papers\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    {  \r\n                        selected_paper.length === 0 ? \r\n                        <p className=\"paper-notification\"> No paper selected </p> :\r\n                        selected_paper.map( name => {\r\n                            return <PaperDetails key={name} data={papers[name]}/>;\r\n                        })\r\n                    }\r\n                </Card.Body>\r\n            </Card>\r\n            \r\n        </StyledPapersSection>\r\n    );\r\n}\r\n\r\nexport default PapersSection;","import React from \"react\";\r\n// styled components\r\nimport styled from 'styled-components';\r\n\r\nconst StyledChartCellContainer = styled.div`\r\n    .grid-values {\r\n        margin: 0.2rem;\r\n        width: 1.2rem;\r\n        height: 1.2rem;\r\n        font-size: 1rem;\r\n        cursor: default;\r\n        position: relative;\r\n\r\n        .tooltiptext {\r\n            visibility: hidden;\r\n            width: 125px;\r\n            background-color: rgba(0,0,0,0.8);\r\n            color: #fff;\r\n            text-align: center;\r\n            padding: 5px 0;\r\n            border-radius: 6px;\r\n            font-size: 0.8rem;\r\n            \r\n            position: absolute;\r\n            top: -1rem;\r\n            left: 2rem; \r\n            z-index: 2;\r\n\r\n            p {\r\n                margin: 0;\r\n            }\r\n\r\n            .tooltip-title {\r\n                font-weight: 500;\r\n                text-align: start;\r\n                padding: 0.2rem 0.5rem;\r\n            }\r\n\r\n            .tooltip-tag {\r\n                width: fit-content;\r\n                padding: 0.2rem;\r\n                border-radius: 0.2rem;\r\n                margin: 0 auto 0.2rem;\r\n                color: black;\r\n                font-size: 0.5rem;\r\n            }\r\n\r\n            .tag-design {\r\n                background-color: lightgray;\r\n                color: black;\r\n            }\r\n\r\n            .tag-hybrid {\r\n                /* color: rgb(181, 237, 152); */\r\n                background-color: rgb(181, 237, 152);\r\n            }\r\n\r\n            .tag-experiment {\r\n                background-color: lightblue;\r\n            }\r\n\r\n            .tag-theory {\r\n                background-color: rgb(250, 224, 152);\r\n            }\r\n        }\r\n\r\n        .tooltiptext::after {\r\n            content: \" \";\r\n            position: absolute;\r\n            top: 20%;\r\n            right: 100%; /* To the left of the tooltip */\r\n            margin-top: -5px;\r\n            border-width: 5px;\r\n            border-style: solid;\r\n            border-color: transparent black transparent transparent;\r\n        }\r\n    }\r\n\r\n    .grid-values:hover .tooltiptext {\r\n        visibility: visible\r\n    }\r\n\r\n    .experiment-deactive {\r\n        color: lightblue;\r\n        background-color: lightblue;\r\n    }\r\n\r\n    .experiment-deactive:hover {\r\n        color: #70C2E8;\r\n        background-color: #70C2E8;\r\n    }\r\n\r\n    .hybrid-deactive {\r\n        color: rgb(181, 237, 152);\r\n        background-color: rgb(181, 237, 152);\r\n    }\r\n\r\n    .hybrid-deactive:hover {\r\n        color: rgb(162, 222, 131);\r\n        background-color: rgb(162, 222, 131);\r\n    }\r\n\r\n    .theory-deactive {\r\n        color: rgb(250, 224, 152);\r\n        background-color: rgb(250, 224, 152);\r\n    }\r\n\r\n    .theory-deactive:hover {\r\n        color: rgb(245, 210, 118);\r\n        background-color: rgb(245, 210, 118);\r\n    }\r\n\r\n`;\r\n\r\nvar WaffleChartCell = ({category, name}) => {\r\n    return (\r\n        <StyledChartCellContainer key={name}>\r\n            <div className={`grid-values ${category.toLowerCase()+\"-deactive\"}`} >\r\n                <span class=\"tooltiptext\">\r\n                    <div>\r\n                        <p className=\"tooltip-title\">Coverage:</p>\r\n                        <p className={`tooltip-tag tag-${category.toLowerCase()}`}>        {category.toLowerCase()} \r\n                        </p>\r\n                    </div>\r\n                    <div>\r\n                        <p className=\"tooltip-title\">Encoding Design:</p>\r\n                        <p className={`tooltip-tag tag-design`}> \r\n                            {name}\r\n                        </p>\r\n                    </div>\r\n                </span>\r\n            </div>\r\n        </StyledChartCellContainer>\r\n    );\r\n}\r\n\r\nexport default WaffleChartCell;","import React, { useState, useEffect} from \"react\";\r\n// styled components\r\nimport styled from 'styled-components';\r\n// bootstrap components\r\nimport Card from 'react-bootstrap/Card';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\n// local componenet\r\nimport WaffleChartCell from './WaffleChartCell';\r\n\r\nconst StyledWaffleChart = styled.div`\r\n    width: 100%;\r\n    margin: 0 0 2rem 0;\r\n    .card {\r\n        /* height: 40vh; */\r\n        .card-body {\r\n            max-height: 45.23rem;\r\n            display: flex;\r\n            flex-direction: row;\r\n            flex-wrap: wrap;\r\n        }\r\n    }\r\n`;\r\n\r\nvar WaffleChart = ({data, encodingTypes}) => {\r\n    const [count, setCount] = useState(0);\r\n    var len = encodingTypes.length;\r\n    var total = (len + Math.pow(len, 2) + Math.pow(len, 3));;\r\n\r\n    useEffect(() => {\r\n        var i = 0;\r\n        for (var encoding of Object.entries(data.coverages)) {\r\n            for (var design of Object.keys(encoding[1])) {\r\n                i++;\r\n            }\r\n        }\r\n        setCount(i);\r\n    });\r\n\r\n    return (\r\n        <StyledWaffleChart>\r\n            <Card>\r\n                <Card.Header>\r\n                    Encoding Coverages\r\n                    <ProgressBar variant=\"info\" now={count / total} />\r\n                    <p>{`${count} out of ${total} covered`}</p>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    {Object.keys(data.coverages).map(encoding => {\r\n                        return Object.keys(data.coverages[encoding]).map(design => {\r\n                            return <WaffleChartCell category={data.coverages[encoding][design].category} name={design} key={design}/>\r\n                        })  \r\n                    })}\r\n                </Card.Body>\r\n            </Card>\r\n        </StyledWaffleChart>\r\n    );\r\n};\r\n\r\nexport default WaffleChart;","import React, { useState, useEffect } from 'react';\r\n// styled components\r\nimport styled from 'styled-components';\r\n// components\r\nimport {\r\n    CoverageFilter,\r\n    CoverageContainer,\r\n    PapersSection,\r\n    WaffleChart\r\n} from '../components';\r\n// local data (can be removed after backend is built)\r\nimport coverages from '../resources/data/coverages.json';\r\n\r\nconst StyledCoverageScreen = styled.div`\r\n    height: calc(100vh - 10rem);\r\n    width: calc(100vw - 8rem);\r\n    margin: 1.2rem 4rem !important;\r\n\r\n    .container-flex {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-between;\r\n    }\r\n`;\r\n\r\nconst CoverageScreen = () => {\r\n    const [selectedTasks, setSelectedTasks] = useState([]);\r\n    const [paperType, setPaperType] = useState([]);\r\n    const [selectedPapers, setSelectedPapers] = useState({});\r\n    const [filteredSelectedPapers, setFilteredSelectedPapers] = useState([]);\r\n    const [filterData, setFilterData] = useState(undefined);\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n\r\n    // data used to display coverage table\r\n    const [data, setData] = useState({\r\n        authors: [],\r\n        tasks: [],\r\n        coverages: {\r\n            '1-encoding': {},\r\n            '2-encoding': {},\r\n            '3-encoding': {},\r\n        },\r\n    });\r\n\r\n    // object wuth file names as keys, abstracted paper data (objects) as values\r\n    const [abstractedPaperData, setAbstracatedPaperData] = useState({});\r\n\r\n    // add tag only if it is not added yet\r\n    let addSelectedTasks = (tag) => {\r\n        if (!selectedTasks.includes(tag)) {\r\n            setSelectedTasks([...selectedTasks, tag]);\r\n        }\r\n    };\r\n\r\n    let deleteSelectedTasks = (value) => {\r\n        let temp = selectedTasks.filter((e) => e !== value);\r\n        setSelectedTasks(temp);\r\n    };\r\n\r\n    var parsed_coverages = JSON.parse(JSON.stringify(coverages));\r\n\r\n    // helper: add to or remove from paper list\r\n    const modifySelectedPapers = (mode, arr) => {\r\n        let updated_papers = JSON.parse(JSON.stringify(selectedPapers));\r\n        for (var str of arr) {\r\n            if (\r\n                selectedPapers[str] !== undefined &&\r\n                selectedPapers[str] !== 0\r\n            ) {\r\n                if (mode) {\r\n                    updated_papers[str] += 1;\r\n                } else {\r\n                    updated_papers[str] -= 1;\r\n                    if (updated_papers[str] === 0) {\r\n                        delete updated_papers[str];\r\n                    }\r\n                }\r\n            } else {\r\n                if (mode) {\r\n                    updated_papers[str] = 1;\r\n                } else {\r\n                    console.log(`Error: can not remove non-existing paper`);\r\n                }\r\n            }\r\n        }\r\n        setSelectedPapers(updated_papers);\r\n        // selectedDetails = Object.keys(selectedPapers);\r\n    };\r\n\r\n    const updateFilteredSelectedPaper = () => {\r\n        // filter to get displayable selected paper\r\n        if (filterData !== undefined ) {\r\n            let new_filtered_data = [];\r\n            for (let paper in selectedPapers) {\r\n                // console.log('filtering selected papers:');\r\n                // console.log(Object.keys(filterData));\r\n                // console.log(paper);\r\n                // console.log(filteredSelectedPapers);\r\n                if (Object.keys(filterData).includes(paper) && !new_filtered_data.includes(paper)) {\r\n                    new_filtered_data.push(paper);\r\n                }\r\n            }\r\n            setFilteredSelectedPapers(new_filtered_data);\r\n        } else {\r\n            setFilteredSelectedPapers(Object.keys(selectedPapers));\r\n        }\r\n    }\r\n\r\n    // helper function that turns one array into n* of its contents\r\n    const duplicateArr = (arr, times) =>\r\n        Array(times)\r\n            .fill([...arr])\r\n            .reduce((a, b) => a.concat(b));\r\n\r\n    // map channel name to its abbreviation\r\n    let channel_map = {\r\n        positionX: 'PX',\r\n        positionY: 'PY',\r\n        length: 'L',\r\n        angle: 'AN',\r\n        area: 'AR',\r\n        texture: 'T',\r\n        volume: 'V',\r\n        density: 'D',\r\n        shape: 'S',\r\n        'color-saturation': 'CS',\r\n        'color-hue': 'CH',\r\n        orentation: 'O',\r\n    };\r\n\r\n    // directly effects the display of the coverage matrix\r\n    let encodingTypes = [\r\n        'PX',\r\n        'PY',\r\n        'L',\r\n        'AN',\r\n        'AR',\r\n        'T',\r\n        'V',\r\n        'D',\r\n        'S',\r\n        'CS',\r\n        'CH',\r\n        'O',\r\n    ];\r\n\r\n    let encoding_counts = ['1-encoding', '2-encoding', '3-encoding'];\r\n\r\n    // huge chunk of function that aggregate necessary data for coverage page\r\n    let getCoverages = () => {\r\n        let source = parsed_coverages;\r\n        if (filterData !== undefined) {\r\n            source = filterData;\r\n        }\r\n        let new_data = {\r\n            authors: [],\r\n            tasks: [],\r\n            coverages: {\r\n                '1-encoding': {},\r\n                '2-encoding': {},\r\n                '3-encoding': {},\r\n            },\r\n        };\r\n        for (let c in source) {\r\n            // aggregate tasks\r\n            let tasks = [];\r\n            for (var t of source[c].Tasks) {\r\n                let processed_task = t.replace(/-\\d+$/, '');\r\n                if (!new_data.tasks.includes(processed_task))\r\n                    new_data.tasks.push(processed_task);\r\n                if (!tasks.includes(processed_task)) tasks.push(processed_task);\r\n            }\r\n\r\n            let designs = source[c]['Covered Designs'];\r\n            // read into each layer of covered designs and populate coverage\r\n            for (var id in designs) {\r\n                for (var layer of designs[id].layers) {\r\n                    // gather data of encodings within each layer\r\n                    let count_encodings = layer['encodings'].length;\r\n                    let encoding_formats = [];\r\n                    // encodings\r\n                    for (var e of layer['encodings']) {\r\n                        let len = encoding_formats.length;\r\n                        if (len > 0) {\r\n                            // duplicate string array to create all possible combinations\r\n                            if (e['channels'].length > 1) {\r\n                                encoding_formats = duplicateArr(\r\n                                    encoding_formats,\r\n                                    e['channels'].length\r\n                                );\r\n                            }\r\n\r\n                            let count = 0;\r\n                            // append each channel to encoding formats\r\n                            for (var channel of e['channels']) {\r\n                                for (\r\n                                    var i = count * len;\r\n                                    i < count * len + len;\r\n                                    i++\r\n                                ) {\r\n                                    encoding_formats[i].push(\r\n                                        channel_map[channel]\r\n                                    );\r\n                                }\r\n                                count++;\r\n                            }\r\n                        } else {\r\n                            for (let c2 of e['channels']) {\r\n                                let new_format = [];\r\n                                new_format.push(channel_map[c2]);\r\n                                encoding_formats.push(new_format);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // process encoding_formats from 2D array to array of strings\r\n                    let encoding_strs = [];\r\n                    for (var f of encoding_formats) {\r\n                        // sort string by its index within encodingTypes\r\n                        f.sort((a, b) => {\r\n                            let ia = encodingTypes.indexOf(a);\r\n                            let ib = encodingTypes.indexOf(b);\r\n                            return ia - ib;\r\n                        });\r\n                        let str = '';\r\n                        for (var fs of f) {\r\n                            str += fs;\r\n                        }\r\n                        encoding_strs.push(str);\r\n                    }\r\n\r\n                    // place data to desired position\r\n                    for (var e_s of encoding_strs) {\r\n                        // create object structure for encoding combination that does not exist yet\r\n                        if (\r\n                            new_data['coverages'][\r\n                                encoding_counts[count_encodings - 1]\r\n                            ][e_s] === undefined\r\n                        ) {\r\n                            new_data['coverages'][\r\n                                encoding_counts[count_encodings - 1]\r\n                            ][e_s] = {\r\n                                category: '',\r\n                                data: undefined,\r\n                            };\r\n                        }\r\n                        // if no category exists, set it to the category of current paper\r\n                        if (\r\n                            new_data['coverages'][\r\n                                encoding_counts[count_encodings - 1]\r\n                            ][e_s]['category'].localeCompare('') === 0\r\n                        ) {\r\n                            new_data['coverages'][\r\n                                encoding_counts[count_encodings - 1]\r\n                            ][e_s]['category'] = source[c].Category;\r\n                            // otherwise, if different category is added to the object, set category to Hybrid\r\n                        } else if (\r\n                            new_data['coverages'][\r\n                                encoding_counts[count_encodings - 1]\r\n                            ][e_s]['category'].localeCompare(\r\n                                source[c].Category\r\n                            ) !== 0\r\n                        ) {\r\n                            new_data['coverages'][\r\n                                encoding_counts[count_encodings - 1]\r\n                            ][e_s]['category'] = 'Hybrid';\r\n                        }\r\n                        // record paper id to such encoding\r\n                        if (\r\n                            new_data['coverages'][\r\n                                encoding_counts[count_encodings - 1]\r\n                            ][e_s]['data'] === undefined\r\n                        ) {\r\n                            new_data['coverages'][\r\n                                encoding_counts[count_encodings - 1]\r\n                            ][e_s]['data'] = [c];\r\n                        } else if (\r\n                            !new_data['coverages'][\r\n                                encoding_counts[count_encodings - 1]\r\n                            ][e_s]['data'].includes(c)\r\n                        ) {\r\n                            new_data['coverages'][\r\n                                encoding_counts[count_encodings - 1]\r\n                            ][e_s]['data'].push(c);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        setData(new_data);\r\n    };\r\n\r\n    let filter = () => {\r\n        // if no filters applied\r\n        if (searchQuery.length === 0 && paperType.length === 0 && selectedTasks.length === 0) {\r\n            setFilterData(undefined);\r\n        } else {\r\n            let res = {};\r\n            for (let paper in parsed_coverages) {\r\n                if (filterHelper(paper)){\r\n                    res[paper] = parsed_coverages[paper];\r\n                } \r\n            }\r\n            setFilterData(res);\r\n        }\r\n       \r\n    };\r\n\r\n    let filterHelper = (paper) => {\r\n        if (searchQuery.length > 0 && !parsed_coverages[paper].Title\r\n            .toLowerCase()\r\n            .includes(searchQuery.toLowerCase())){\r\n                return false;\r\n        }\r\n        if (paperType.length > 0 && !paperType.includes(parsed_coverages[paper].Category)){\r\n            return false;\r\n        }\r\n        // a paper is considered within filter if it includes one or more selected tasks\r\n        if (selectedTasks.length > 0 && parsed_coverages[paper].Tasks.length > 0) {\r\n            for (const taskVal of parsed_coverages[paper].Tasks) {\r\n                let t = taskVal.replace(/-\\d+$/, '');\r\n                if (selectedTasks.includes(t)) {\r\n                    return true;\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    // Search articles by title\r\n    const searchByTitle = (value) => {\r\n        let trimmed = value.trim();\r\n        if (trimmed.length !== 0) {\r\n            setSearchQuery(trimmed);\r\n        }\r\n    };\r\n\r\n    const searchByPaperType = (paperidx) => {\r\n        let curPaperType = 'Experiment';\r\n        if (paperidx === 1) curPaperType = 'Theory';\r\n        if (paperidx === 2) curPaperType = 'Hybrid';\r\n        let temp = [...paperType];\r\n        const index = temp.indexOf(curPaperType);\r\n        if (index > -1) {\r\n            temp.splice(index, 1);\r\n        } else {\r\n            temp.push(curPaperType);\r\n        }\r\n        setPaperType(temp);\r\n    };\r\n\r\n    useEffect(() => {\r\n        let new_abstracted_data =  {};\r\n        for (let c in parsed_coverages) {\r\n            // aggregate tasks\r\n            let tasks = [];\r\n            for (let t of parsed_coverages[c].Tasks) {\r\n                let processed_task = t.replace(/-\\d+$/, '');\r\n                if (!data.tasks.includes(processed_task))\r\n                    data.tasks.push(processed_task);\r\n                if (!tasks.includes(processed_task)) tasks.push(processed_task);\r\n            }\r\n            // aggregate abstracted paper data\r\n            new_abstracted_data[c] = {\r\n                category: parsed_coverages[c].Category,\r\n                title: parsed_coverages[c].Title,\r\n                tasks: tasks,\r\n                ranked:\r\n                    Object.keys(parsed_coverages[c].Results.Experimental)\r\n                        .length > 0 ||\r\n                    Object.keys(parsed_coverages[c].Results.Theoretical)\r\n                        .length > 0,\r\n            };\r\n        }\r\n        console.log(`Abstracted paper data:`);\r\n        console.log( new_abstracted_data);\r\n        setAbstracatedPaperData(new_abstracted_data);\r\n        getCoverages();\r\n        console.log('Formatted data at useEffect[]:');\r\n        console.log(data)\r\n\r\n    }, []);\r\n\r\n    //get most update filter data based on task\r\n    useEffect(() => {\r\n        console.log('Selected task in useEffect');\r\n        console.log(selectedTasks);\r\n        filter();\r\n    }, [selectedTasks, paperType, searchQuery]);\r\n\r\n    useEffect(() => {\r\n        console.log('New filter Data:');\r\n        console.log(filterData);\r\n        getCoverages();\r\n        console.log('formatted data at useEffect[filterData]:');\r\n        console.log(data)\r\n        // once filter data has changed, apply changes to filtered Selected Paper\r\n        updateFilteredSelectedPaper();\r\n    }, [filterData]);\r\n\r\n    useEffect(() => {\r\n        updateFilteredSelectedPaper();\r\n    },[selectedPapers]);\r\n\r\n\r\n    return (\r\n        <StyledCoverageScreen>\r\n            <CoverageFilter\r\n                searchByTitle={searchByTitle}\r\n                tasks={data.tasks}\r\n                setTasks={setSelectedTasks}\r\n                searchByPaperType={searchByPaperType}\r\n                setSelectedPapers={setSelectedPapers}\r\n                deleteSelectedTasks={deleteSelectedTasks}\r\n                addSelectedTasks={addSelectedTasks}\r\n                encodingTypes={encodingTypes}\r\n                coverage_data={data.coverages}\r\n                modPapers={modifySelectedPapers}\r\n            />\r\n            <div className='container-flex'>\r\n                {/* <CoverageContainer\r\n                    coverage_data={data}\r\n                    encodingTypes={encodingTypes}\r\n                    modPapers={modifySelectedPapers}\r\n                /> */}\r\n                <WaffleChart data={data} encodingTypes={encodingTypes}/>\r\n                <PapersSection\r\n                    selected_paper={filteredSelectedPapers}\r\n                    papers={abstractedPaperData}\r\n                />\r\n            </div>\r\n        </StyledCoverageScreen>\r\n    );\r\n};\r\n\r\nexport default CoverageScreen;\r\n","import { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\nimport GlobalStyle from './Theme';\r\n// bootstrap styles\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// local components and screens\r\nimport {CoverageScreen} from './screens';\r\nimport {Header, Footer} from './components';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <GlobalStyle />\r\n      <main>\r\n        <Header />\r\n        <Switch>\r\n          <Route path=\"/\" exact component={CoverageScreen} />\r\n        </Switch>\r\n        <Footer />\r\n      </main>\r\n    </Router>\r\n      \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}